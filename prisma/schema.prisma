// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int                @id @default(autoincrement())
  phoneNumber  String             @unique @map("phone_number")
  displayName  String?            @map("display_name")
  stytchUserId String?            @unique @map("stytch_user_id")
  createdAt    DateTime           @default(now()) @map("created_at")

  // Relations
  createdEvents    Event[]               @relation("EventCreator")
  participations   EventParticipant[]
  mediaUploads     MediaUpload[]

  @@map("users")
}

model Event {
  id          String   @id @default(cuid())
  name        String
  description String?
  eventCode   String   @unique @map("event_code")
  joinCode    String   @unique @map("join_code")
  creatorId   Int      @map("creator_user_id")
  eventDate   DateTime @map("event_date") @db.Date
  location    String?
  status      String   @default("active")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  creator      User                  @relation("EventCreator", fields: [creatorId], references: [id])
  participants EventParticipant[]
  mediaUploads MediaUpload[]
  kudos        Kudos[]

  @@map("events")
}

model EventParticipant {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  eventId    String   @map("event_id")
  totalScore Int      @default(0) @map("total_score")
  joinedAt   DateTime @default(now()) @map("joined_at")

  // Relations
  user       User         @relation(fields: [userId], references: [id])
  event      Event        @relation(fields: [eventId], references: [id])
  holeScores HoleScore[]
  kudos      Kudos[]

  @@unique([userId, eventId])
  @@map("event_participants")
}

model HoleScore {
  id               Int      @id @default(autoincrement())
  participantId    Int      @map("participant_id")
  holeNumber       Int      @map("hole_number")
  strokes          Int?
  hotDogsConsumed  Int      @default(0) @map("hot_dogs_consumed")
  beersConsumed    Int      @default(0) @map("beers_consumed")
  beerType         String?  @map("beer_type")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  participant EventParticipant @relation(fields: [participantId], references: [id])

  @@unique([participantId, holeNumber])
  @@map("hole_scores")
}

model MediaUpload {
  id            Int      @id @default(autoincrement())
  eventId       String   @map("event_id")
  userId        Int      @map("user_id")
  participantId Int?     @map("participant_id")
  holeNumber    Int?     @map("hole_number")
  mediaType     String   @map("media_type")
  r2Key         String   @map("r2_key")
  r2Url         String   @map("r2_url")
  thumbnailUrl  String?  @map("thumbnail_url")
  caption       String?
  uploadedAt    DateTime @default(now()) @map("uploaded_at")

  // Relations
  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("media_uploads")
}

model Kudos {
  id            Int      @id @default(autoincrement())
  eventId       String   @map("event_id")
  participantId Int      @map("participant_id")
  kudosType     String   @map("kudos_type")
  sessionId     String   @map("session_id")
  givenAt       DateTime @default(now()) @map("given_at")

  // Relations
  event       Event            @relation(fields: [eventId], references: [id])
  participant EventParticipant @relation(fields: [participantId], references: [id])

  @@unique([sessionId, participantId, kudosType])
  @@map("kudos")
}

// Indexes for performance
// These are automatically created by Prisma for foreign keys and unique constraints
// Additional indexes can be added as needed